
@node Extensions
@chapter Extensions

@menu
* Text editor substrate::
* Drawing Two-Dimensional Images::
* Fonts and Extended Text Styles::
* Tab Layout::
* Render Images::
@end menu

@node Text editor substrate
@section Text editor substrate
@cindex drei
@cindex input-editor
@cindex text-editor
@cindex text-field

For brievity only basic topics common to all substrates are covered in
the manual. Drei documentation is provided as a separate document.

@menu
* Text field gadget::
* Text editor pane::
@end menu

@node Text field gadget
@node Text editor pane

@node Drawing Two-Dimensional Images
@section Drawing Two-Dimensional Images

@menu
* Images::
* Utility Functions::
* Reading Image Files::
@end menu

@node Images
@subsection Images

Images are all rectangular arrangements of pixels.  The type of a pixel
depends on the exact type of the image.  In addition, a pixel has a
color which also depends on the exact type of the image.  You can think
of the color as an interpretation of the pixel value by the type of
image.

The coordinate system of an image has (0,0) in its upper-left corner.
The x coordinate grows to the right and the y coordinate downwards.

@deftp {Protocol Class} image

This class is the base class for all images.
@end deftp

@deffn {Generic Function} {image-width} image
@end deffn
@deffn {Generic Function} {image-height} image

This function returns the width and the height of the image
respectively.
@end deffn

@deffn {Generic Function} {image-pixels} image

This function returns a two-dimensional array of pixels, whose element
type depends on the exact subtype of the image.
@end deffn

@deffn {Generic Function} {image-pixel} image x y

This function returns the pixel at the coordinate indicated by the
values of x and y.  The type of the return value depends on the exact
image type.
@end deffn

@deffn {Generic Function} {(setf image-pixel)} x y pixel image

Set the value of the pixel at the coordinate indicated by the values of
x and y.  The exact type acceptable for the pixel argument depends on
the exact subtype of the image.  If x or y are not within the values of
the width and height of the image, an error is signaled.
@end deffn

@deffn {Generic Function} {image-color} image x y

This function returns the color value of the pixel indicated by the
values of x and y.  The exact type of the return value depends on the
specific subtype of the image.
@end deffn

@deffn {Generic Function} {(setf image-color)} x y color image

Set the color value of the pixel at the coordinate indicated by the
values of x and y.  The exact type acceptable for the color argument
depends on the exact subtype of the image.  In addition, the exact color
given to the pixel may be an approximation of the value of the color
argument.  For instance, if the image is a gray-level image, then the
color given will correspond to the intensity value of the color
argument.  If x or y are not within the values of the width and height
of the image, an error is signaled.
@end deffn

@deftp {Protocol Class} spectral-image

This class is a subclass of the image class.  It is the root of a
subhiearchy for manipulating images represented in various spectral
formats, other than RGB.  [This subhierarchy will be elaborated later in
the context of the color model of Strandh and Braquelaire].
@end deftp

@deftp {Protocol Class} rgb-image

This class is a subclass of the image class.  It is the root of a
subhierarchy for manipulating images whose pixel colors are represented
as RGB coordinates.  The function image-color always returns a value of
type (unsigned-byte 24) for images of this type, representing three
different intensity values of 0-255.
@end deftp

@deftp {Protocol Class} truecolor-image

This class is a subclass of the rgb-image class.  Images of this class
have pixel values of type (unsigned-byte 24).  The pixel values directly
represent RGB values.
@end deftp

@deftp {Protocol Class} colormap-image

This class is a subclass of the rgb-image class.  Images of this class
have pixel values that don't directly indicate the color of the pixel.
The translation between pixel value and color may be implicit (as is the
case of gray-level images) or explicit with a colormap stored in the
image object.
@end deftp

@deftp {Protocol Class} gray-level-image

This class is a subclass of the colormap-image class.  Images of this
type have pixel values that implicitely represent a gray-level.  The
function pixel-color always returns an RGB value that corresponds to the
identical intensities for red, green, and blue, according to the pixel
value.
@end deftp

@deffn {Generic Function} {gray-image-max-levels} gray-level-image

This function returns the maximum number of levels of gray that can be
represented by the image.  The value returned by this function minus one
would yield a color value of 255,255,255 if it were the value of a
pixel.
@end deffn

@deffn {Generic Function} {gray-image-max-level} gray-level-image

This function returns the maximum level currently present in the image.
This function may be very costly to compute, as it might have to scan
the entire image.
@end deffn

@deffn {Generic Function} {gray-image-min-level} gray-level-image

This function returns the minimum level currently present in the image.
This function may be very costly to compute, as it might have to scan
the entire image.
@end deffn

@deftp {Class} {256-gray-level-image}

This class is a subclass of the gray-level-image class.  Images of this
type have pixels represented as 8-bit unsigned pixels.  The function
image-pixel always returns a value of type (unsigned-byte 8) for images
of this type.  The function gray-image-max-levels returns 256 for all
instances of this class.
@end deftp

@deftp {Class} {binary-image}

This class is a subclass of the gray-level-image class.  Images of this
type have pixel values of type bit.  The function image-pixel returns
values of type bit when applied to an image of this type.  The function
pixel-color returns 0,0,0 for zero-valued bits and 255,255,255 for
one-valued bits.
@end deftp

@node Utility Functions
@subsection Utility Functions

@deffn {Generic Function} {rotate-image} image angle &key (antialias t)
@end deffn
@deffn {Generic Function} {flip-image} {image ...}
@end deffn
@deffn {Generic Function} {translate-image} {image ...}
@end deffn
@deffn {Generic Function} {scale-image} {image ...}
 ...
@end deffn

@node Reading Image Files
@subsection Reading Image Files

@deffn {Generic Function} {read-image} source &key type width height

Read an image from the source.  The source can be a pathname designator
(a string or a path), or a stream.  The caller can supply a value for
type, width, and height for sources that don't indicate these values.  A
value of nil for type means recognize the type automatically.  Other
values for type are :truecolor (an array of 3-byte color values)
:256-gray-level (an array of 1-byte gray-level values) :binary (an array
of bits).
@end deffn

@deffn {Generic Function} {write-image} image destination &key (type :pnm) (quality 1)

Write the image to the destination.  The destination can be a pathname
designator (a string or a path), or a stream.  Valid values of type are
:pnm (pbm, pgm, or ppm according to the type of image), :png, :jpeg,
(more...).  The quality argument is a value from 0 to 1 and indicates
desired image quality (for formats with lossy compression).
@end deffn


@node Fonts and Extended Text Styles
@section Fonts and Extended Text Styles

@menu
* Extended Text Styles::
* Listing Fonts::
@end menu

@node Extended Text Styles
@subsection Extended Text Styles

McCLIM extends the legal values for the @cl{family} and @cl{face}
arguments to @cl{make-text-style} to include strings (in additional to
the portable keyword symbols), as permitted by the CLIM spec, section
11.1.

Each backend defines its own specific syntax for these family and face
names.

The CLX backend maps the text style family to the X font's
@emph{foundry} and @emph{family} values, separated by a dash.  The
face is mapped to @emph{weight} and @emph{slant} in the same way.  For
example, the following form creates a text style for
@emph{-misc-fixed-bold-r-*-*-18-*-*-*-*-*-*-*}:

@lisp
(make-text-style "misc-fixed" "bold-r" 18)
@end lisp

In the GTK backend, the text style family and face are used directly
as the Pango font family and face name.  Please refer to Pango
documentation for details on the syntax of face names.  Example:

@lisp
(make-text-style "Bitstream Vera Sans" "Bold Oblique" 54)
@end lisp

@node Listing Fonts
@subsection Listing Fonts

McCLIM's font listing functions allow applications to list all
available fonts available on a @class{port} and create text style
instances for them.

Example:

@lisp
* (find "Bitstream Vera Sans Mono"
        (clim-extensions:port-all-font-families (clim:find-port))
        :key #'clim-extensions:font-family-name
        :test #'equal)
#<CLIM-GTKAIRO::PANGO-FONT-FAMILY Bitstream Vera Sans Mono>

* (clim-extensions:font-family-all-faces *)
(#<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Bold>
 #<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Bold Oblique>
 #<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Oblique>
 #<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Roman>)

* (clim-extensions:font-face-scalable-p (car *))
T

* (clim-extensions:font-face-text-style (car **) 50)
#<CLIM:STANDARD-TEXT-STYLE "Bitstream Vera Sans Mono" "Bold" 50>
@end lisp

@include class-clim-extensions-font-family.texi
@include class-clim-extensions-font-face.texi

@include fun-clim-extensions-port-all-font-families.texi

@include fun-clim-extensions-font-family-name.texi
@include fun-clim-extensions-font-family-port.texi
@include fun-clim-extensions-font-family-all-faces.texi

@include fun-clim-extensions-font-face-name.texi
@include fun-clim-extensions-font-face-family.texi
@include fun-clim-extensions-font-face-all-sizes.texi
@include fun-clim-extensions-font-face-text-style.texi

@node Tab Layout
@section Tab Layout

The tab layout is a composite pane arranging its children so that
exactly one child is visible at any time, with a row of buttons
allowing the user to choose between them.

See also the tabdemo.lisp example code located under Examples/ in the
McCLIM distribution.  It can be started using demodemo.

@include class-clim-tab-layout-tab-layout.texi
@include class-clim-tab-layout-tab-layout-pane.texi
@include class-clim-tab-layout-tab-page.texi
@include macro-clim-tab-layout-with-tab-layout.texi

@include fun-clim-tab-layout-tab-layout-pages.texi

@include fun-clim-tab-layout-tab-page-tab-layout.texi
@include fun-clim-tab-layout-tab-page-title.texi
@include fun-clim-tab-layout-tab-page-pane.texi
@include fun-clim-tab-layout-tab-page-presentation-type.texi
@include fun-clim-tab-layout-tab-page-drawing-options.texi

@include fun-clim-tab-layout-add-page.texi
@include fun-clim-tab-layout-remove-page.texi
@include fun-clim-tab-layout-tab-layout-enabled-page.texi
@include fun-clim-tab-layout-sheet-to-page.texi
@include fun-clim-tab-layout-find-tab-page-named.texi
@include fun-clim-tab-layout-switch-to-page.texi
@include fun-clim-tab-layout-remove-page-named.texi

@include fun-clim-tab-layout-note-tab-page-changed.texi

@c com-switch-to-tab-page
@c com-remove-tab-page

@node Render Images
@section Render Images
This extension has the goal to provide a fast and flexible way to display images in the screen. It is not a general purpose image processing library (see opticl).

Images are all rectangular arrangements of pixels. The type of a pixel
depends on the exact type of the image. In addition, a pixel has a
color which also depends on the exact type of the image. You can think
of the color as an interpretation of the pixel value by the type of
the image.

The coordinate system of an image has (0,0) in its upper-left corner.
The x coordinate grows to the right and the y coordinate downwards.

An image can have an additional alpha channel.

@deftp {Protocol Class} image

This class is the base class for all images.
@end deftp

@deffn {Generic Function} {image-width} image
@end deffn
@deffn {Generic Function} {image-height} image

This function returns the width and the height of the image
respectively.
@end deffn

@deffn {Generic Function} {image-alpha-p} image

This function returns true if the image has an aplha channel.
@end deffn

@subsection Image Mixins

@deftp {Protocol Class} rgb-image-mixin

@end deftp

@deftp {Protocol Class} stencil-image-mixin

@end deftp

@subsection Basic Image

@deftp {Protocol Class} basic-image

This class is a subclass of the image class.
@end deftp

@deffn {Generic Function} {image-pixels} basic-image

This function returns the internal representation of the array of pixels. 
@end deffn

@subsection Drawable Images

In order to be drawn in a screen, each pixel must be mapped into its rgb components.
Each component is represented by an octet.

In McCLIM a rgb color is represented as a triple of real number between 0 and 1. 
Differently, in the image library, when we want drawn an image, a rgb color must be represented as a triple of octet (integer number between 0 and 255).
In addition, the opacity is represented by an octet (0 - full transparent, 255 - opaque).

@deftp {Type} {octect}

@code{'(unsigned-byte 8))}
@end deftp

@deffn {Function} {color-octet->value} v

This function returns @code{(/ v 255)}.
@end deffn

@deffn {Function} {color-value->octet} color

This function returns @code{(coerce (round (* 255 color)) 'octet))}.
@end deffn

@deffn {Function} {octet-mult} (o1 o2)

This function returns a rusult equals to @code{(round (* (/ o1 255) (/ o2 255) 255))}.
@end deffn

@deffn {Function} {octet-blend-function} (r1 g1 b1 o1  r2 g2 b2 o2)

This function is analogous to the @code{blend-function} for octet.
@end deffn

@deftp {Protocol Class} drawable-image

This class is a subclass of the image class. All subclasses must implement @code{map-rgb-color}.
@end deftp

By default, in order to drawn an image into a screen, the backend calls @code{map-rgb-color}.

@deffn {Generic Function} {map-rgb-color} drawable-image fn

This function calls fn for each pixels of the image. Function fn must take 5 arguments: x, y, red, green, and blue.
@end deffn

To draw an image you can use @code{draw-image}.

@deffn {Function} {draw-image} sheet image &rest args &key clipping-region transformation

This function draws an image on a sheet.
@end deffn    

@subsection McCLIM integration
An image can be used as design or pattern. To draw an image you can also use @code{draw-pattern*} or @code{draw-design}.

@deftp {Class} image-design

This class is a subclass of the design class.
@end deftp

@deffn {Function} {make-image-design} image

This function returns an image-design of the image @code{image}.
@end deffn

@deftp {Class} image-pattern (pattern image-design)

This class is a subclass of the pattern and image-design classes.
@end deftp

@deffn {Function} {make-image-pattern} image

This function returns an image-pattern of the image @code{image}.
@end deffn

Every design can be converted into pixeled-design.

@deftp {Protocol Class} {pixeled-design}

@end deftp

@deffn {Generic Function} {pixeled-design-region} pixeled-design

@end deffn

@deffn {Generic Function} {make-pixeled-rgba-octets-fn} pixeled-design

@end deffn

@deffn {Generic Function} {make-pixeled-rgba-octets-unsafe-fn} pixeled-design

@end deffn

@deftp {Protocol Class} {pixeled-uniform-design}

@end deftp

@deftp {Protocol Class} {pixeled-functional-design}

@end deftp

@deftp {Protocol Class} {pixeled-image-design}

@end deftp

@deffn {Feneric Function} {make-pixeled-design} design &key foreground background

@end deffn


@subsection Opticl Images

@deftp {Protocol Class} opticl-image

This class is a subclass of the basic-image and drawable-image classes. 
The generic function image-pixels returns an opticl image.
@end deftp

@deftp {Class} opticl-rgb-image

This class is a subclass of the basic-image and opticl-image classes. 
A pixel is a triple of octets that represents the red, green and blue component, respectively.
A pixel can have an optional octet that represents its alpha value.

In the current implementation, @code{image-pixels} returns 
an array of type @code{opticl:8-bit-rgba-image}.
@end deftp

@deftp {Class} ocpicl-gray-level-image

This class is a subclass of the basic-image and opticl-image classes. 
In the current implementation, @code{image-pixels} returns 
an array of type @code{8-bit-gray-image}.
@end deftp

@deftp {Class} opticl-stencil-image

This class is a subclass of the basic-image and opticl-image classes. 
This image contains only al alpha channel.
In the current implementation, @code{image-pixels} returns 
an array of type @code{8-bit-gray-image}.
@end deftp

@subsection 2d Images
@deftp {Protocol Class} 2d-image

This class is a subclass of the basic-image and drawable-image classes. 
The generic function image-pixels returns a two dimensioanl array of pixels.
@end deftp

@deftp {Class} 2d-rgb-image

This class is a subclass of the basic-image and 2d-image classes. 
A pixel is a triple of octets that represents the red, green and blue component, respectively.
A pixel can have an optional octet that represents its alpha value. 

@code{image-pixels} returns a (simple-array (unsigned-byte 32) (* *)).
The pixel values directly represent ABRG octet values. 
@end deftp

@deftp {Class} 2d-gray-level-image

This class is a subclass of the basic-image and 2d-image classes. 
@code{image-pixels} returns a (simple-array (unsigned-byte 8) (* *)).
@end deftp

@deftp {Class} 2d-stencil-image

This class is a subclass of the basic-image and 2d-image classes. 
This image contains only al alpha channel.

@code{image-pixels} returns a (simple-array (unsigned-byte 8) (* *)).
@end deftp

@subsection Operations

@deffn {Generic Function} {fill-image} image pixeled-design stencil &key x y width height stencil-dx stencil-dy

@end deffn

@deffn {Generic Function} {copy-image} src-image sx sy width height dst-image x y

@end deffn

@deffn {Generic Function} {coerce-image} image image-class

@end deffn


@subsection I/O Images

@deffn {Generic Function} {read-image} source &key type width height

Read an image from the source.  The source can be a pathname designator
(a string or a path), or a stream.  The caller can supply a value for
type, width, and height for sources that don't indicate these values.  A
value of nil for type means recognize the type automatically.  Other
values for type are :truecolor (an array of 3-byte color values)
:256-gray-level (an array of 1-byte gray-level values) :binary (an array
of bits).
@end deffn

@deffn {Generic Function} {write-image} image destination &key (type :pnm) (quality 1)

Write the image to the destination.  The destination can be a pathname
designator (a string or a path), or a stream.  Valid values of type are
:pnm (pbm, pgm, or ppm according to the type of image), :png, :jpeg,
(more...).  The quality argument is a value from 0 to 1 and indicates
desired image quality (for formats with lossy compression).
@end deffn

@subsection CL-Vectors Integration

@deffn {Generic Function} {aa-cells-sweep/rectangle} image pixeled-design state clip-region

@end deffn

@deffn {Function} {aa-update-state} state paths transformation

@end deffn

@deffn {Function} {aa-fill-paths} image pixeled-design paths state transformation clip-region

@end deffn

@deffn {Function} {aa-stroke-paths} image pixeled-design paths line-style state transformation clip-region

@end deffn

@deffn {Function} {make-path} x y
@end deffn

@deffn {Function} {line-to} path x y
@end deffn

@deffn {Function} {close-path} path
@end deffn

@deffn {Function} {stroke-path} path line-style
@end deffn

