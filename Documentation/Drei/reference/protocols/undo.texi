@node [Ref] Undo Protocol
@subsection Undo Protocol

Undo is the facility by which previous modifications to the buffer can
be undone, returning the buffer state to what it was prior to some
modification.

Undo is organized into a separate module.  This module conceptually
maintains a tree where the nodes represent application states and the
arcs represent transitions between these states.  The root of the tree
represents the initial state of the application.  The undo module also
maintains a current state.  During normal application operation, the
current state is a leaf of a fairly long branch of the tree.  Normal
application operations add new nodes to the end of this branch.  Moving
the current state up the tree corresponds to an undo operation and
moving it down some branch corresponds to some redo operation.

Arcs in the tree are ordered so that they always point FROM the current
state.  When the current state moves from one state to the other, the
arc it traversed is reversed.  The undo module does this by calling a
generic function that client code must supply a method for.

@menu
* Protocol Specification::
* Implementation::
* How The Buffer Handles Undo::
@end menu

@node Protocol Specification
@subsubsection Protocol Specification

@include condition-drei-undo-no-more-undo.texi

@include class-drei-undo-undo-tree.texi

@include class-drei-undo-undo-record.texi

@include class-drei-undo-standard-undo-record.texi

@include fun-drei-undo-add-undo.texi

@include fun-drei-undo-flip-undo-record.texi

@include fun-drei-undo-undo.texi

@include fun-drei-undo-redo.texi

@node Implementation
@subsubsection Implementation

Application states have no explicit representation, only undo records
do.  The current state is a pointer to an undo record (meaning, the
current state is BELOW the transition represented by the record) or to
the undo tree itself if the current state is the initial state of the
application.

@node How The Buffer Handles Undo
@subsubsection How The Buffer Handles Undo

@include class-drei-undo-mixin.texi

@include fun-drei-undo-tree.texi

Undo is implemented as @cl{:before} methods on
@cl{insert-buffer-object}, @cl{insert-buffer-sequence} and
@cl{delete-buffer-range} specialized on @cl{undo-mixin}.

@include fun-drei-undo-accumulate.texi

@include fun-drei-performing-undo.texi

Three subclasses @cl{insert-record}, @cl{delete-record}, and
@cl{compound-record} of undo-record are used.  An insert record stores a
position and some sequence of objects to be inserted, a delete record
stores a position and the length of the sequence to be deleted, and a
compound record stores a list of other undo records.

The @cl{:before} methods on @cl{insert-buffer-object} and
@cl{insert-buffer-sequence} push a record of type @cl{delete-record}
onto the undo accumulator for the buffer, and the @cl{:before} method on
@cl{delete-buffer-range} pushes a record of type @cl{insert-record} onto
the undo accumulator.

@include macro-drei-with-undo.texi

To avoid storing an undo record for each object that is inserted,
the with-undo macro may in some cases just increment the length of
the sequence in the last delete-record.

The method on @cl{flip-undo-record} specialized on @cl{insert-record}
binds @cl{performing-undo} for the buffer to @cl{T}, inserts the
sequence of objects in the buffer, and calls @cl{change-class} to
convert the @cl{insert-record} to a @cl{delete-record}, giving it a the
length of the stored sequence.

The method on @cl{flip-undo-record} specialized on @cl{delete-record}
binds @cl{performing-undo} for the buffer to @cl{T}, deletes the range
from the buffer, and calls @cl{change-class} to convert the
@cl{delete-record} to an @cl{insert-record}, giving it the sequence at
the stored offset in the buffer with the specified length.

The method on @cl{flip-undo-record} specialized on @cl{compound-record}
binds @cl{performing-undo} for the buffer to @cl{T}, recursively calls
@cl{flip-undo-record} on each element of the list of undo records, and
finally destructively reverses the list.

@include class-drei-drei-undo-record.texi

@include class-drei-simple-undo-record.texi

@include class-drei-insert-record.texi

@include class-drei-delete-record.texi

@include class-drei-compound-record.texi
